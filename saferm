#!/bin/bash

# Define protected directories - these directories themselves cannot be deleted
PROTECTED_DIRS=("/bin" "/boot" "/data" "/dev" "/etc" "/home" "/lib" "/lib32" "/lib64" \
               "/libx32" "/mnt" "/media" "/opt" "/proc" "/root" "/run" "/sbin" "/snap" \
               "/srv" "/sys" "/tmp" "/usr" "/var")

# Function to check path status
check_path_status() {
    local path=$1
    # shellcheck disable=SC2155
    local path_realpath=$(realpath -s "$path")

    # Check if it's exactly one of the protected directories (not subdirectory)
    for protected_dir in "${PROTECTED_DIRS[@]}"; do
        if [[ "$path_realpath" == "$protected_dir" ]]; then
            echo "protected"
            return
        fi
    done

    # Check if it's a direct child of root (not a subdirectory of anything)
    if [[ "$path_realpath" =~ ^/[^/]+$ ]]; then
        echo "root_child"
        return
    fi

    echo "safe"
}

# Main execution
if [ "$#" -ge 2 ] && [ "$0" = "/usr/local/bin/saferm" ] && [ "$1" = "-rf" ]; then

    # Arrays to store different path categories
    protected_paths=()
    root_children=()
    safe_paths=()

    # Categorize all paths
    for ((i = 2; i <= $#; i++)); do
        path=${!i}
        status=$(check_path_status "$path")

        case "$status" in
            "protected")
                protected_paths+=("$path")
                ;;
            "root_child")
                root_children+=("$path")
                ;;
            "safe")
                safe_paths+=("$path")
                ;;
        esac
    done

    # Handle protected paths
    if [ ${#protected_paths[@]} -gt 0 ]; then
        echo "Error: The following paths cannot be deleted as they are protected system directories:"
        for path in "${protected_paths[@]}"; do
            echo "  - $path"
        done
        echo "Aborting deletion."
        exit 1
    fi

    # Handle root children paths
    if [ ${#root_children[@]} -gt 0 ]; then
        root_children_list=$(printf "  - %s\n" "${root_children[@]}")

        # Use zenity for GUI dialog if available, fallback to text prompt
        if command -v zenity &> /dev/null; then
            message="Warning: You are about to delete the following root filesystem directories:\n\n$root_children_list\n\nThis operation can be dangerous. Are you sure you want to proceed?"
            zenity --question --title="Dangerous Operation" --text="$message" --width=500 --ok-label="Yes" --cancel-label="No"
            confirmation=$?
            [[ $confirmation -eq 0 ]] && confirmed=true || confirmed=false
        else
            echo "Danger: You are about to delete the following root filesystem directories:"
            echo -e "$root_children_list"
            echo -n "This operation can be dangerous. Are you sure you want to proceed? (yes/no): "
            read answer
            [[ "$answer" == "yes" ]] && confirmed=true || confirmed=false
        fi

        if [ "$confirmed" != "true" ]; then
            echo "Deletion canceled for root directories."
            # Continue with safe paths if there are any
            if [ ${#safe_paths[@]} -eq 0 ]; then
                echo "No files were deleted."
                exit 0
            else
                echo "Proceeding with deletion of non-root paths only."
            fi
        fi
    fi

    # All checks passed, combine safe paths and confirmed root children
    paths_to_delete=()

    if [ ${#root_children[@]} -gt 0 ] && [ "$confirmed" == "true" ]; then
        paths_to_delete=("${root_children[@]}" "${safe_paths[@]}")
    else
        paths_to_delete=("${safe_paths[@]}")
    fi

    # Execute deletion if there are paths to delete
    if [ ${#paths_to_delete[@]} -gt 0 ]; then
        /bin/rm -rf "${paths_to_delete[@]}"
        echo "Deletion completed for the confirmed paths."
    else
        echo "No paths to delete."
    fi
else
    # If not a rm -rf command, pass through to normal rm
    /bin/rm "$@"
fi